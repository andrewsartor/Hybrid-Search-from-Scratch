import os
import pickle
import string
from collections import Counter, defaultdict

from nltk.stem import PorterStemmer

from .search_utils import (
    CACHE_DIR,
    DEFAULT_SEARCH_LIMIT,
    Movie,
    load_movies,
    load_stopwords,
)


class InvertedIndex:
    def __init__(self) -> None:
        self.index: dict[str, set[int]] = defaultdict(set)
        self.docmap: dict[int, Movie] = {}
        self.term_frequencies: defaultdict[int, Counter[str]] = defaultdict(Counter)
        self.index_path: str = os.path.join(CACHE_DIR, "index.pkl")
        self.docmap_path: str = os.path.join(CACHE_DIR, "docmap.pkl")
        self.term_frequencies_path: str = os.path.join(
            CACHE_DIR, "term_frequencies.pkl"
        )

    def build(self) -> None:
        movies = load_movies()
        for m in movies:
            doc_id = m["id"]
            doc_description = f"{m['title']} {m['description']}"
            self.docmap[doc_id] = m
            self.__add_document(doc_id, doc_description)

    def save(self) -> None:
        os.makedirs(CACHE_DIR, exist_ok=True)
        with open(self.index_path, "wb") as f:
            pickle.dump(self.index, f)
        with open(self.docmap_path, "wb") as f:
            pickle.dump(self.docmap, f)
        with open(self.term_frequencies_path, "wb") as f:
            pickle.dump(self.term_frequencies, f)

    def load(self) -> None:
        with open(self.index_path, "rb") as f:
            self.index = pickle.load(f)
        with open(self.docmap_path, "rb") as f:
            self.docmap = pickle.load(f)
        with open(self.term_frequencies_path, "rb") as f:
            self.term_frequencies = pickle.load(f)

    def get_documents(self, term: str) -> list[int]:
        doc_ids = self.index.get(term, set())
        return sorted(list(doc_ids))

    def get_tf(self, doc_id: int, term: str) -> int:
        token = tokenize_text(term)
        if len(token) != 1:
            raise ValueError("Incorrect number of terms for term frequency calculation")
        print(self.term_frequencies[doc_id])
        return self.term_frequencies[doc_id][term[0]]

    def __add_document(self, doc_id: int, text: str) -> None:
        tokens = tokenize_text(text)
        seen: set[str] = set()
        for token in tokens:
            self.term_frequencies[doc_id][token] += 1
            if token not in seen:
                self.index[token].add(doc_id)
                seen.add(token)


def tf_command(doc_id: int, term: str) -> int:
    idx = InvertedIndex()
    idx.load()
    return idx.get_tf(doc_id, term)


def build_command() -> None:
    idx = InvertedIndex()
    idx.build()
    idx.save()


def search_command(query: str, limit: int = DEFAULT_SEARCH_LIMIT) -> list[Movie]:
    idx = InvertedIndex()
    idx.load()
    query_tokens = tokenize_text(query)
    seen: set[int] = set()
    results: list[Movie] = []
    for token in query_tokens:
        matched_docs = idx.get_documents(token)
        for doc_id in matched_docs:
            if doc_id in seen:
                continue
            seen.add(doc_id)
            doc = idx.docmap[doc_id]
            if not doc:
                continue
            results.append(doc)
        if len(results) >= limit:
            break

    return results[:limit]


def has_matching_token(query_tokens: list[str], title_tokens: list[str]) -> bool:
    for query_token in query_tokens:
        for title_token in title_tokens:
            if query_token in title_token:
                return True
    return False


def preprocess_text(text: str) -> str:
    text = text.lower()
    remove_punctuation = str.maketrans("", "", string.punctuation)
    text = text.translate(remove_punctuation)
    return text


def tokenize_text(text: str) -> list[str]:
    text = preprocess_text(text)
    tokens = text.split()
    stopwords = set(load_stopwords())
    valid_tokens: list[str] = []
    for token in tokens:
        if token and token not in stopwords:
            valid_tokens.append(token)
    stemmer = PorterStemmer()
    stemmed_words: list[str] = []
    for word in valid_tokens:
        stemmed_words.append(stemmer.stem(word))
    return stemmed_words
